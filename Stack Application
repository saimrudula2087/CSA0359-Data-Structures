#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#define MAX_SIZE 100
struct Stack
{
    int top;
    char items[MAX_SIZE];
};
void push(struct Stack *s, char value) 
{
    if (s->top == MAX_SIZE - 1)
	{
        printf("Stack Overflow\n");
        exit(EXIT_FAILURE);
    }
    s->items[++(s->top)] = value;
}
char pop(struct Stack *s) 
{
    if (s->top == -1) 
	{
        printf("Stack Underflow\n");
        exit(EXIT_FAILURE);
    }
    return s->items[(s->top)--];
}
int isOperand(char ch)
{
    return isalnum(ch);
}
int precedence(char ch) 
{
    switch (ch) 
	{
        case '+':
        case '-':
            return 1;
        case '*':
        case '/':
            return 2;
    }
    return -1;
}
void infixToPostfix(char infix[], char postfix[], struct Stack *s)
{
    s->top = -1;
    int i = 0, j = 0;

    while (infix[i] != '\0')
	{
        if (isOperand(infix[i]))
            postfix[j++] = infix[i];
        else if (infix[i] == '(')
            push(s, '(');
        else if (infix[i] == ')')
		{
            while (s->top != -1 && s->items[s->top] != '(')
                postfix[j++] = pop(s);
            pop(s); // Discard '('
        } 
		else 
		{
            while (s->top != -1 && precedence(infix[i]) <= precedence(s->items[s->top]))
                postfix[j++] = pop(s);
            push(s, infix[i]);
        }
        i++;
    }

    while (s->top != -1)
        postfix[j++] = pop(s);
    postfix[j] = '\0';
}

int main()
{
    char infix[MAX_SIZE], postfix[MAX_SIZE];
    struct Stack s;
    printf("Enter infix expression: ");
    scanf("%s", infix);
    infixToPostfix(infix, postfix, &s);
    printf("Postfix expression: %s\n", postfix);
    return 0;
}
