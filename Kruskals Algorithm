#include <stdio.h>
#include <stdbool.h>
#define MAX_VERTICES 6
#define MAX_EDGES 10
struct Edge 
{
    int src, dest, weight;
};
struct Subset 
{
    int parent;
    int rank;
};
struct Edge edges[MAX_EDGES] = {
    {0, 1, 6}, {0, 2, 1}, {0, 3, 5},
    {1, 3, 5}, {1, 4, 3}, {2, 3, 5},
    {2, 5, 4}, {3, 4, 2}, {3, 5, 6},
    {4, 5, 6}
};
struct Subset subsets[MAX_VERTICES];
int numVertices = 6; 
int numEdges = 10;
void kruskalMST();
int find(int vertex);
void unionSets(int x, int y);
void sortEdges();
void printMST(struct Edge resultMST[]);
int main() 
{
    kruskalMST();
    return 0;
}
void kruskalMST() 
{
    for (int v = 0; v < numVertices; ++v) 
	{
        subsets[v].parent = v;
        subsets[v].rank = 0;
    }
    sortEdges();
    int mstIndex = 0;
    struct Edge resultMST[numVertices - 1];
    for (int e = 0; e < numEdges && mstIndex < numVertices - 1; ++e) 
	{
        struct Edge nextEdge = edges[e];
        int srcParent = find(nextEdge.src);
        int destParent = find(nextEdge.dest);
        if (srcParent != destParent) 
		{
            resultMST[mstIndex++] = nextEdge;
            unionSets(srcParent, destParent);
        }
    }
    printMST(resultMST);
}
int find(int vertex) 
{
    if (subsets[vertex].parent != vertex)
        subsets[vertex].parent = find(subsets[vertex].parent);
    return subsets[vertex].parent;
}
void unionSets(int x, int y) 
{
    int xroot = find(x);
    int yroot = find(y);
    if (subsets[xroot].rank < subsets[yroot].rank)
        subsets[xroot].parent = yroot;
    else if (subsets[xroot].rank > subsets[yroot].rank)
        subsets[yroot].parent = xroot;
    else 
	{
        subsets[yroot].parent = xroot;
        subsets[xroot].rank++;
    }
}
void sortEdges() 
{
    for (int i = 0; i < numEdges - 1; ++i) 
	{
        for (int j = 0; j < numEdges - i - 1; ++j) 
		{
            if (edges[j].weight > edges[j + 1].weight) 
			{
                struct Edge temp = edges[j];
                edges[j] = edges[j + 1];
                edges[j + 1] = temp;
            }
        }
    }
}
void printMST(struct Edge resultMST[]) 
{
    int totalWeight = 0;
    printf("Edges in the Minimum Spanning Tree:\n");
    for (int i = 0; i < numVertices - 1; ++i) 
	{
        printf("(%d, %d) weight: %d\n", resultMST[i].src, resultMST[i].dest, resultMST[i].weight);
        totalWeight += resultMST[i].weight;
    }
    printf("Total weight of the MST: %d\n",totalWeight);
}
