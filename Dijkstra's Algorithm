#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#define MAX_NODES 100
int graph[MAX_NODES][MAX_NODES];
int n; 
int minDistance(int dist[], int sptSet[]) 
{
    int min = INT_MAX, min_index;
    for(int v = 0; v < n; v++) 
	{
        if(sptSet[v] == 0 && dist[v] <= min) 
		{
            min = dist[v];
            min_index = v;
        }
    }
    return min_index;
}
void printSolution(int dist[]) 
{
    printf("Vertex \t Distance from Source\n");
    for(int i = 0; i < n; i++)
        printf("%d \t\t %d\n", i, dist[i]);
}
void dijkstra(int src) 
{
    int dist[MAX_NODES];
    int sptSet[MAX_NODES];
    for(int i = 0; i < n; i++) 
	{
        dist[i] = INT_MAX;
        sptSet[i] = 0;
    }
    dist[src] = 0;
    for(int count = 0; count < n - 1; count++) 
	{
        int u = minDistance(dist, sptSet);
        sptSet[u] = 1;
        for(int v = 0; v < n; v++) 
		{
            if(!sptSet[v] && graph[u][v] && dist[u] != INT_MAX && dist[u] + graph[u][v] < dist[v]) 
			{
                dist[v] = dist[u] + graph[u][v];
            }
        }
    }
    printSolution(dist);
}
int main() 
{
    printf("Enter the number of nodes in the graph: ");
    scanf("%d", &n);
    printf("Enter the adjacency matrix:\n");
    for(int i = 0; i < n; i++) 
	{
        for(int j = 0; j < n; j++) 
		{
            scanf("%d", &graph[i][j]);
        }
    }
    int source;
    printf("Enter the source node: ");
    scanf("%d", &source);
    dijkstra(source);
    return 0;
}
