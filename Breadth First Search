#include <stdio.h>
#include <stdlib.h>
#define MAX_NODES 100
struct Queue 
{
    int items[MAX_NODES];
    int front;
    int rear;
};
struct Queue* createQueue() 
{
    struct Queue* q = (struct Queue*)malloc(sizeof(struct Queue));
    q->front = -1;
    q->rear = -1;
    return q;
}
int isEmpty(struct Queue* q) 
{
    if(q->rear == -1) 
        return 1;
    else 
        return 0;
}

void enqueue(struct Queue* q, int value)
{
    if(q->rear == MAX_NODES-1)
        printf("\nQueue is Full!!");
    else {
        if(q->front == -1) 
            q->front = 0;
        q->rear++;
        q->items[q->rear] = value;
    }
}
int dequeue(struct Queue* q)
{
    int item;
    if(isEmpty(q))
	{
        printf("Queue is empty");
        item = -1;
    } 
	else 
	{
        item = q->items[q->front];
        q->front++;
        if(q->front > q->rear)
		{
            q->front = q->rear = -1;
        }
    }
    return item;
}
int graph[MAX_NODES][MAX_NODES];
int visited[MAX_NODES];
int n; 
void BFS(int start) 
{
    struct Queue* q = createQueue();
    visited[start] = 1;
    enqueue(q, start);
    printf("Breadth First Search starting from node %d: ", start);
    while(!isEmpty(q)) 
	{
        int current = dequeue(q);
        printf("%d ", current);
        for(int i = 0; i < n; i++) 
		{
            if(graph[current][i] == 1 && visited[i] == 0) 
			{
                visited[i] = 1;
                enqueue(q, i);
            }
        }
    }
    printf("\n");
}
int main() 
{
    printf("Enter the number of nodes in the graph: ");
    scanf("%d", &n);
    printf("Enter adjacency matrix:\n");
    for(int i = 0; i < n; i++) 
	{
        for(int j = 0; j < n; j++) 
		{
            scanf("%d", &graph[i][j]);
        }
    }
    for(int i = 0; i < n; i++) 
	{
        visited[i] = 0;
    }
    int start_node;
    printf("Enter the starting node for BFS traversal: ");
    scanf("%d", &start_node);
    BFS(start_node);
    return 0;
}
