#include <stdio.h>
#include <stdlib.h>
#define MAX_SIZE 4
struct Stack 
{
    int items[MAX_SIZE];
    int top;
};
void initializeStack(struct Stack *stack);
int isEmpty(struct Stack *stack);
int isFull(struct Stack *stack);
void push(struct Stack *stack, int value);
int pop(struct Stack *stack);
int peek(struct Stack *stack);

int main() 
{
    struct Stack stack;
    initializeStack(&stack);
    push(&stack, 10);
    push(&stack, 20);
    push(&stack, 30);
    push(&stack,40);
    push(&stack,50);
    printf("Peek element after pushing: %d\n", peek(&stack));
    printf("Popped element: %d\n", pop(&stack));
    printf("Peek element after popping: %d\n", peek(&stack));
    return 0;
}
void initializeStack(struct Stack *stack)
 {
    stack->top = -1;
}

int isEmpty(struct Stack *stack)
 {
    return stack->top == -1;
}
int isFull(struct Stack *stack)
{
    return stack->top == MAX_SIZE - 1;
}
void push(struct Stack *stack, int value) 
{
    if (isFull(stack)) 
	{
        printf("Stack overflow!\n");
        return;
    }
    stack->top++;
    stack->items[stack->top] = value;
}
int pop(struct Stack *stack)
 {
    if (isEmpty(stack)) 
	{
        printf("Stack underflow!\n");
        exit(1);
    }
    int poppedItem = stack->items[stack->top];
    stack->top--;
    return poppedItem;
}
int peek(struct Stack *stack) 
{
    if (isEmpty(stack)) 
	{
        printf("Stack is empty!\n");
        exit(1);
    }
    return stack->items[stack->top];
}
